// Code generated by go-bindata.
// sources:
// templates/.gitignore
// templates/LICENSE
// templates/Makefile
// templates/dev.env
// templates/modd.conf
// templates/pre_commit
// templates/tmux
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesGitignore = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xd2\x73\x09\x8e\x0f\x2e\xc9\x2f\x4a\xe5\xd2\xd2\x2b\x2e\x8f\xce\xcb\x2f\x88\xe5\xca\xc9\x4f\xd7\xd7\xd2\xcb\xc9\x4f\xe7\x2a\x49\x4c\x2f\xe6\x52\x04\x91\xfa\x5c\x25\xb9\x05\xfa\x5a\x5a\xfa\x5a\x5c\x8a\x20\x56\x72\x62\x72\x46\xaa\xbe\x5e\x76\x6a\x6a\x01\x17\x20\x00\x00\xff\xff\x74\xd8\x25\x55\x44\x00\x00\x00")

func templatesGitignoreBytes() ([]byte, error) {
	return bindataRead(
		_templatesGitignore,
		"templates/.gitignore",
	)
}

func templatesGitignore() (*asset, error) {
	bytes, err := templatesGitignoreBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/.gitignore", size: 68, mode: os.FileMode(420), modTime: time.Unix(1451235108, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesLicense = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x5c\x51\xc1\x8e\xab\x38\x10\xbc\xfb\x2b\x4a\x73\x9a\x91\xd0\xec\x7d\x6f\x1e\x70\x82\xb5\x60\x47\xc6\x79\xd9\x1c\x09\x38\x83\x57\x04\x47\xd8\xec\x68\xf4\x94\x7f\x5f\x35\xc9\xbc\xa7\xd9\x13\xb8\xba\xbb\xaa\xab\xba\x96\x16\xa3\xef\xdc\x14\x1d\x63\x76\x70\x20\xa0\xba\x03\x78\xae\xa5\x7d\x61\x2c\x0f\xd7\xcf\xd9\xbf\x0f\x09\xcf\xdd\x0b\x7e\xfe\x7c\x3d\xba\x76\xbe\xdd\xe8\x8f\x2f\x69\x08\xf3\xed\xc6\xd8\xce\xcd\x17\x1f\xa3\x0f\x13\x7c\xc4\xe0\x66\x77\xfa\xc4\xfb\xdc\x4e\xc9\xf5\x19\xce\xb3\x73\x08\x67\x74\x43\x3b\xbf\xbb\x0c\x29\xa0\x9d\x3e\x71\x75\x73\x0c\x13\xc2\x29\xb5\x7e\xf2\xd3\x3b\x5a\x74\xe1\xfa\xc9\xc2\x19\x69\xf0\x11\x31\x9c\xd3\x47\x3b\x3b\xb4\x53\x8f\x36\xc6\xd0\xf9\x36\xb9\x1e\x7d\xe8\x96\x8b\x9b\x52\x9b\x48\xef\xec\x47\x17\xf1\x9c\x06\x87\xa7\xe6\x31\xf1\xf4\xb2\x8a\xf4\xae\x1d\x99\x9f\x40\xb5\xaf\x12\x3e\x7c\x1a\xc2\x92\x30\xbb\x98\x66\xdf\x11\x47\x06\x3f\x75\xe3\xd2\xd3\x0e\x5f\xe5\xd1\x5f\xfc\x43\x81\xc6\xd7\x04\x22\x4b\x01\x4b\x74\xd9\xba\x67\x86\x4b\xe8\xfd\x99\xbe\x6e\xb5\x75\x5d\x4e\xa3\x8f\x43\x86\xde\x13\xf5\x69\x49\x2e\x43\x24\x70\x0d\x34\x23\x1f\x7f\x84\x19\xd1\x8d\x23\xeb\xc2\xd5\xbb\x88\xd5\xeb\xef\xed\xd6\x1e\x5a\xfd\x4a\x81\xa6\x47\x44\x91\x90\x8f\x21\x5c\xbe\x3b\xf1\x91\x9d\x97\x79\xf2\x71\x70\xeb\x4c\x1f\x10\xc3\xaa\xf8\x8f\xeb\x12\x21\xd4\x7e\x0e\xe3\x18\x3e\xc8\x5a\x17\xa6\xde\x93\xa3\xf8\xe7\xfd\xda\xed\x29\xfc\xeb\x56\x2f\xf7\x03\x4f\x21\xf9\xee\x1e\xf7\x7a\x80\xeb\xef\xab\x3e\x4a\x71\x68\xc7\x11\x27\xf7\x08\xcc\xf5\xf0\x13\x23\xe8\xcb\xce\x4c\xf2\x31\xb5\x53\xf2\xed\x88\x6b\x98\x57\xbd\xff\xdb\x7c\x65\xcc\x96\x02\x8d\xde\xd8\x03\x37\x02\xb2\xc1\xce\xe8\x1f\xb2\x10\x05\x9e\x78\x03\xd9\x3c\x65\x38\x48\x5b\xea\xbd\xc5\x81\x1b\xc3\x95\x3d\x42\x6f\xc0\xd5\x11\x7f\x49\x55\x64\x10\x7f\xef\x8c\x68\x1a\x68\xc3\x64\xbd\xab\xa4\x28\x32\x48\x95\x57\xfb\x42\xaa\x2d\xde\xf6\x16\x4a\x5b\x54\xb2\x96\x56\x14\xb0\x1a\x24\xf8\xa0\x92\xa2\x21\xb2\x5a\x98\xbc\xe4\xca\xf2\x37\x59\x49\x7b\xcc\xd8\x46\x5a\x45\x9c\x1b\x6d\xc0\xb1\xe3\xc6\xca\x7c\x5f\x71\x83\xdd\xde\xec\x74\x23\xc0\x55\x01\xa5\x95\x54\x1b\x23\xd5\x56\xd4\x42\xd9\x57\x48\x05\xa5\x21\x7e\x08\x65\xd1\x94\xbc\xaa\x48\x8a\xf1\xbd\x2d\xb5\xa1\xfd\x90\xeb\xdd\xd1\xc8\x6d\x69\x51\xea\xaa\x10\xa6\xc1\x9b\x40\x25\xf9\x5b\x25\xee\x52\xea\x88\xbc\xe2\xb2\xce\x50\xf0\x9a\x6f\xc5\x3a\xa5\x6d\x29\x0c\xa3\xb6\xfb\x76\x38\x94\x82\x20\xd2\xe3\x0a\x3c\xb7\x52\x2b\xb2\x91\x6b\x65\x0d\xcf\x6d\x06\xab\x8d\xfd\x35\x7a\x90\x8d\xc8\xc0\x8d\x6c\x28\x90\x8d\xd1\x75\xc6\x28\x4e\xbd\xa1\x16\xa9\x68\x4e\x89\x3b\x0b\x45\x8d\x6f\x17\xd1\x66\x7d\xef\x1b\xf1\x8b\x10\x85\xe0\x95\x54\xdb\x06\x52\x7d\x3b\xdf\x2b\xfb\x2f\x00\x00\xff\xff\xad\xa3\x35\x56\x48\x04\x00\x00")

func templatesLicenseBytes() ([]byte, error) {
	return bindataRead(
		_templatesLicense,
		"templates/LICENSE",
	)
}

func templatesLicense() (*asset, error) {
	bytes, err := templatesLicenseBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/LICENSE", size: 1096, mode: os.FileMode(420), modTime: time.Unix(1451235108, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesMakefile = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x74\x8e\x31\x0e\xc2\x30\x0c\x45\x67\x72\x0a\x5f\x20\x09\x13\x43\x25\x76\x26\x60\x65\x0c\x89\x49\x23\x25\x75\xd5\x7c\xdf\x1f\xb5\x54\xea\xc4\xf6\x9f\xfd\x86\xe7\x9e\xb7\xc7\xfd\x35\x50\x67\xe8\x4c\xe0\x0e\x63\x12\x7f\x82\x56\x0c\x3b\x6e\xaf\xc1\x9c\xb2\x50\x66\x90\x05\x39\xef\x9c\x3b\x0e\x4a\xb9\x60\xd4\xb7\x8b\xd2\x7c\x94\x05\xdc\x8b\x6f\x92\x92\x8f\x2d\x6d\xe3\x8f\x1b\x2a\x47\x8c\xd2\x42\xf7\x59\x1a\x23\xd4\x32\x81\x97\xd5\x3e\x88\xac\x2d\x53\x47\xa8\x95\xac\xd5\x39\x05\xb0\x31\x6b\xd9\x2f\x69\x5d\x64\x51\x1a\x8b\xe2\x7a\x39\xf7\xbd\xee\x1b\x00\x00\xff\xff\x18\x0b\x08\xc3\xd9\x00\x00\x00")

func templatesMakefileBytes() ([]byte, error) {
	return bindataRead(
		_templatesMakefile,
		"templates/Makefile",
	)
}

func templatesMakefile() (*asset, error) {
	bytes, err := templatesMakefileBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/Makefile", size: 217, mode: os.FileMode(420), modTime: time.Unix(1471612056, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesDevEnv = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xb4\x53\xc1\x6e\xdb\x3a\x10\x3c\x9b\x5f\x31\xb1\x0c\x18\x08\x5e\x6c\xe4\xf5\xa6\x20\x2d\x7a\x08\xda\x5b\x03\xb4\x39\x05\x01\x4c\x93\x2b\x6b\x5b\x7a\xa9\x2e\x29\x29\x42\xd3\x7f\x2f\xa8\xa4\x69\x91\x73\xc3\x23\x39\x3b\x9c\xd9\x9d\xad\x4e\xb6\x7b\x96\xed\xde\xa6\xd6\x98\x0a\x57\x62\xf7\x81\x12\x12\x1f\xbb\x40\xe8\x34\x7e\x25\x97\xb1\xb7\x89\x3c\xc6\xa8\xdf\x9a\x10\x47\x53\xe1\x26\xd9\x03\xd5\xa6\xc2\xf9\x06\x57\x92\x7a\x25\x4c\xb1\x47\x6b\x87\x3f\x45\x9e\x15\x2c\x89\x3d\xc1\x62\x9d\xd4\xad\xcb\x15\xb9\x1c\x75\x42\x8e\x70\xf1\xd8\x85\x09\x23\xe7\x16\x1f\x3e\x5d\xbf\xff\xf2\xd1\x54\xf8\x7f\x83\x5d\x8a\xbd\x3a\x82\xa7\x61\x43\x32\xec\xd0\x44\x85\xd0\x88\x4c\x7a\x64\xb1\x01\x89\x52\xe2\x28\xc9\x54\x78\xb3\xc1\x67\xca\x20\x19\x30\x58\xe5\x47\xf5\x36\x63\xe4\x10\x4c\x71\x74\xad\xa4\xf4\x3d\xe1\x0c\xa3\x55\x01\x37\xf0\xd4\x91\x78\x12\xc7\x94\x20\x31\x17\x91\xd9\x86\x40\x1e\x51\x9f\xd5\xa7\xac\xbd\xcb\xc5\x18\x8b\x8b\x5a\x74\x9b\x0a\x67\xff\xfc\x98\xb1\x65\xd7\xe2\x10\xf1\x16\x5b\x4f\xc3\x56\xfa\x10\xf0\xf0\x00\x72\x6d\xc4\x9a\x54\xa3\xd6\xd8\x1d\xe2\x6e\xd6\xda\xc4\x5e\xfc\x7f\xe0\x04\xfe\x4b\xf8\xbb\x75\xb1\x7a\x93\x39\x70\x9e\xd0\xf4\xe2\xf2\x53\x7f\x5e\x41\xf0\x6f\x7a\x24\xdb\xd0\xb5\x52\xc3\xf7\x65\x78\xf8\x61\x16\x15\x5c\x14\xcf\xe5\xd5\x86\x30\xa1\xef\xbc\xcd\x84\xdc\x12\x66\x08\xc9\xc0\x1a\xe5\x48\x92\x9f\xc7\x85\x33\xf8\x28\xeb\x5c\xaa\x9f\xf0\x33\x96\x9b\x62\xd1\x06\x25\xeb\xa7\xc2\x9b\x2d\x4b\x9a\xb9\x3a\x9b\x5b\xec\x89\xe5\x80\xce\xa6\x12\x4d\x96\x8d\x59\x70\x83\xdb\x5b\x9c\x60\x59\xaf\x0a\x43\xbd\xc4\xe5\x25\x4e\x97\xf5\xea\xbc\x5e\x9e\xe2\xee\xee\xa2\x14\x8b\x59\x2c\xe8\xbe\x8b\x9a\xe7\x6f\x2e\x57\xe7\x8f\xe8\x0b\xb3\x68\xd8\xfc\x34\xe6\x85\xab\xd5\x63\x34\xcb\x96\xcc\x79\x2a\x69\x73\x7d\xca\xf1\xf8\x22\x74\x2d\xe9\xbc\x11\xaf\xd0\x71\xf3\x2b\x00\x00\xff\xff\xad\x43\xe9\xb4\xa6\x03\x00\x00")

func templatesDevEnvBytes() ([]byte, error) {
	return bindataRead(
		_templatesDevEnv,
		"templates/dev.env",
	)
}

func templatesDevEnv() (*asset, error) {
	bytes, err := templatesDevEnvBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/dev.env", size: 934, mode: os.FileMode(420), modTime: time.Unix(1471610205, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesModdConf = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xd2\xd2\xd2\xd7\xd2\x4b\xcf\x57\xa8\xe6\xe2\x2c\x28\x4a\x2d\xb0\x52\x48\xcf\x57\x28\x49\x2d\x2e\x51\xd0\x2d\xc9\xcc\x4d\xcd\x2f\x2d\xb1\x35\x33\x28\x56\xd0\xd3\xd7\xd3\xd3\xe3\x52\x50\x50\x50\x80\x29\xca\x4d\x2d\x49\xcc\xc9\xcc\x2b\x49\x2d\x82\x4a\xd6\x72\x01\x02\x00\x00\xff\xff\x85\x6f\x5e\x61\x4b\x00\x00\x00")

func templatesModdConfBytes() ([]byte, error) {
	return bindataRead(
		_templatesModdConf,
		"templates/modd.conf",
	)
}

func templatesModdConf() (*asset, error) {
	bytes, err := templatesModdConfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/modd.conf", size: 75, mode: os.FileMode(420), modTime: time.Unix(1471610892, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesPre_commit = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x9c\x8f\xbd\x4e\x03\x31\x10\x84\x7b\x3f\xc5\x10\x22\xae\xe1\xee\x12\x5a\x04\x2f\x41\x89\x90\xe2\x38\x6b\x9f\xa5\x3b\x6f\xb4\xbb\x0e\x41\xca\xc3\xa3\xfc\x36\xd0\x40\x37\xc5\xe8\x9b\xf9\xee\xef\xfa\xaa\xd2\xaf\x73\xe9\xa9\xec\xb0\xf6\x3a\x38\x17\x27\x0b\x5c\x8b\xbd\xac\x52\x36\x8c\xda\xc6\x3c\x92\xe2\x80\x24\xb4\x45\xd3\x25\x9e\x37\x38\x60\xef\x25\x29\x12\xc7\xc9\xd0\x8e\x78\x7a\x7d\x58\xe2\x80\xcf\x80\x76\x5c\xb9\x1c\xf1\x8e\xf9\x95\x84\x36\x19\x16\xf8\x78\x86\x0d\x54\x1c\x00\x50\x18\x18\xb3\x37\x9e\x08\x67\xbc\x17\x2a\x8d\x21\xb2\x4c\xde\x8c\x36\x8f\xd8\x8e\xe4\x95\x20\xb5\xa0\x49\x8c\xe3\x4e\xd7\x77\x5d\xd7\xc0\xf8\xd2\xc3\x17\x57\x81\x72\x95\x40\x08\xbc\x21\xac\x29\xb2\x1c\xf3\x34\x65\xb3\x5c\xd2\xec\x3c\xb7\xcf\x86\xa5\x8b\xd9\xb9\x1d\xdd\xf4\x18\x3b\xba\x40\x7f\xfd\x7f\xad\xfe\xe1\xff\xd6\xab\xe6\x92\x4e\xe0\x81\xaa\x64\xb5\x1c\xf4\x87\xcc\x6d\xf7\x24\xa3\x44\x47\x32\x48\x84\x45\x91\x0d\x71\xf4\x49\xe1\xcb\x06\x81\x45\x28\xfc\xc7\xf4\x94\x16\xee\x3b\x00\x00\xff\xff\x55\xc9\xf9\x14\xe4\x01\x00\x00")

func templatesPre_commitBytes() ([]byte, error) {
	return bindataRead(
		_templatesPre_commit,
		"templates/pre_commit",
	)
}

func templatesPre_commit() (*asset, error) {
	bytes, err := templatesPre_commitBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/pre_commit", size: 484, mode: os.FileMode(420), modTime: time.Unix(1451235108, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesTmux = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x84\xd0\xb1\x52\xc3\x30\x0c\x06\xe0\x19\x3d\xc5\x5f\xc3\xaa\x96\x96\x0d\x8e\x81\x83\x91\xe3\x1d\xdc\x58\x25\x3e\x62\xc7\x54\x26\x29\x94\xbe\x3b\x77\xc4\x21\x84\x85\x55\xfe\xf4\x5b\xf7\x9f\x2f\x56\x5b\x1f\x57\x5b\xab\x35\xa9\x64\xb0\x10\xa9\xa8\xfa\x36\xde\x1e\x8f\xcb\xbb\x94\x9e\x6c\x90\xd3\x89\xc8\xef\xb0\x40\x0e\x6f\x07\x34\x8a\x4f\x3c\xef\x25\x81\x5f\x61\x2e\x0a\x37\x37\xc8\xb5\x44\x3a\xfb\x36\x51\x7a\x2e\x0f\x60\x07\x56\x8c\x8e\x8a\xd8\x4b\xb4\x41\xb8\xf7\xd1\xb5\x3d\x3a\x1f\xca\x5c\x53\xe3\xf3\x38\xe6\x6e\xe4\x2a\xd1\xf1\x8b\xbc\x2b\x38\xff\x64\x5d\xaf\x97\x6b\x98\xce\x07\x83\x7b\x0e\x53\xb2\xfa\x0f\xe1\x64\xa3\xfc\xc1\x1b\xf0\x03\xae\x2e\xff\xcb\xdc\xc0\x84\xd6\xb9\x21\x74\xe7\x89\x8a\x6e\xa4\x9a\x2e\xfb\xbd\x31\x03\xc3\xbf\x8f\x24\x07\xa9\x86\xc2\x6c\xce\xb6\xaa\x67\x7d\x4c\xdb\xf4\x15\x00\x00\xff\xff\x0f\xce\x31\x13\x83\x01\x00\x00")

func templatesTmuxBytes() ([]byte, error) {
	return bindataRead(
		_templatesTmux,
		"templates/tmux",
	)
}

func templatesTmux() (*asset, error) {
	bytes, err := templatesTmuxBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/tmux", size: 387, mode: os.FileMode(493), modTime: time.Unix(1471612120, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/.gitignore": templatesGitignore,
	"templates/LICENSE": templatesLicense,
	"templates/Makefile": templatesMakefile,
	"templates/dev.env": templatesDevEnv,
	"templates/modd.conf": templatesModdConf,
	"templates/pre_commit": templatesPre_commit,
	"templates/tmux": templatesTmux,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		".gitignore": &bintree{templatesGitignore, map[string]*bintree{}},
		"LICENSE": &bintree{templatesLicense, map[string]*bintree{}},
		"Makefile": &bintree{templatesMakefile, map[string]*bintree{}},
		"dev.env": &bintree{templatesDevEnv, map[string]*bintree{}},
		"modd.conf": &bintree{templatesModdConf, map[string]*bintree{}},
		"pre_commit": &bintree{templatesPre_commit, map[string]*bintree{}},
		"tmux": &bintree{templatesTmux, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

