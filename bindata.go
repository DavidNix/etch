// Code generated by go-bindata.
// sources:
// templates/.gitignore
// templates/LICENSE
// templates/Makefile
// templates/dev.env
// templates/pre_commit
// templates/tmux
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesGitignore = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xd2\x73\x09\x8e\x0f\x2e\xc9\x2f\x4a\xe5\xd2\xd2\x2b\x2e\x8f\xce\xcb\x2f\x88\xe5\xca\xc9\x4f\xd7\xd7\xd2\x03\x92\x5c\x25\x89\xe9\xc5\x5c\x8a\x20\x52\x9f\xab\x24\xb7\x40\x5f\x4b\x4b\x5f\x0b\xc8\x07\xb2\x92\x13\x93\x33\x52\xf5\xf5\xb2\x53\x53\x0b\xb8\x00\x01\x00\x00\xff\xff\x74\xd8\x25\x55\x44\x00\x00\x00")

func templatesGitignoreBytes() ([]byte, error) {
	return bindataRead(
		_templatesGitignore,
		"templates/.gitignore",
	)
}

func templatesGitignore() (*asset, error) {
	bytes, err := templatesGitignoreBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/.gitignore", size: 68, mode: os.FileMode(420), modTime: time.Unix(1451235108, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesLicense = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x5c\x52\xcd\x6e\xea\x3a\x10\xde\xfb\x29\x46\xac\x5a\x29\xe2\xee\xef\xce\x24\xa6\x58\x37\xc4\x91\x13\xca\x65\x19\x12\x43\x7c\x14\x62\x64\x3b\x07\x55\x55\xdf\xfd\xcc\x04\xda\xaa\x47\xaa\x54\xe6\xf3\xcc\xf7\x33\x93\xad\xac\x61\xb0\xad\x19\x83\x61\xac\xee\x0d\x10\x90\xdf\x01\x78\xc2\xe2\x99\xb1\xd4\x5d\xdf\xbc\x3d\xf7\x11\x9e\xda\x67\x78\x7f\x5f\x1e\x4c\xe3\x3f\x3e\xe8\x17\x9f\x62\xef\xf0\x37\x63\xa5\xf1\x17\x1b\x82\x75\x23\xd8\x00\xbd\xf1\xe6\xf8\x06\x67\xdf\x8c\xd1\x74\x09\x9c\xbc\x31\xe0\x4e\xd0\xf6\x8d\x3f\x9b\x04\xa2\x83\x66\x7c\x83\xab\xf1\x01\x07\xdc\x31\x36\x76\xb4\xe3\x19\x1a\x68\x51\x8c\x61\x67\xec\x91\x26\xb8\x53\xbc\x35\xde\x60\x73\x07\x4d\x08\xae\xb5\x0d\xf2\x41\xe7\xda\xe9\x62\xc6\xd8\x44\xd2\x3b\xd9\xc1\x04\x78\x8a\xe8\x7e\x51\x3d\x26\x16\xcf\xb3\x48\x67\x9a\x81\xd9\x11\xe8\xed\xf3\x09\x6e\x16\x4d\x4f\x11\xbc\x09\xd1\xdb\x96\x38\x12\xb0\x63\x3b\x4c\x1d\x79\xf8\x7c\x1e\xec\xc5\x3e\x14\x68\x7c\xde\x40\x60\x48\x3a\x05\x4c\x40\x3e\x13\xb8\xb8\xce\x9e\xe8\xbf\x99\x63\x5d\xa7\xe3\x60\x43\x9f\x40\x67\x89\xfa\x38\x45\x04\x03\x81\xf3\x42\x13\xca\xf1\x8f\xf3\x10\xcc\x30\x30\x64\xb0\xe8\x7b\xce\xfa\xed\x6e\xee\x21\xeb\x57\x5a\x68\x7c\xac\x28\x10\x72\xeb\xdd\xe5\x67\x12\x1b\xd8\x69\xf2\x23\x4a\x9a\x79\xa6\x73\xb8\xb2\x59\xf1\x97\x69\x23\x21\xd4\x7e\x72\xc3\xe0\x6e\x14\xad\x75\x63\x67\x29\x51\xf8\xf7\x7e\xed\xe6\xe8\x7e\x9b\x39\xcb\xfd\xc0\xa3\x8b\x68\xf5\x6e\x81\x0e\x70\xfd\xbe\xea\xe3\x29\xf4\xcd\x30\xc0\xd1\x3c\x16\x86\xba\x76\x64\x04\x7d\xc6\xf1\x24\x1f\x22\x1e\xde\x36\x03\x5c\x9d\x9f\xf5\xfe\x8e\xb9\x44\xfd\x8d\x80\x4a\xad\xeb\x3d\xd7\x02\x64\x05\xa5\x56\xaf\x32\x13\x19\x2c\x78\x85\xf5\x22\x81\xbd\xac\x37\x6a\x57\x03\x76\x68\x5e\xd4\x07\x50\x6b\xe0\xc5\x01\xfe\x93\x45\x96\x80\xf8\xbf\xd4\xa2\xaa\x40\x69\x26\xb7\x65\x2e\x05\x62\xb2\x48\xf3\x5d\x26\x8b\x17\x58\xe1\x5c\xa1\xf0\x5b\x96\xf8\x11\x23\x69\xad\x80\x04\x1f\x54\x52\x54\x44\xb6\x15\x3a\xdd\x60\xc9\x57\x32\x97\xf5\x21\x61\x6b\x59\x17\xc4\xb9\x56\x1a\x38\x94\x5c\xd7\x32\xdd\xe5\x5c\x43\xb9\xd3\xa5\xaa\x04\xca\x67\x48\x5b\xc8\x62\xad\x51\x45\x6c\x45\x51\x2f\x51\x15\x31\x10\xaf\x58\x40\xb5\xe1\x79\x4e\x52\x8c\xef\xd0\xbd\x26\x7f\x90\xaa\xf2\xa0\xe5\xcb\xa6\x86\x8d\xca\x33\x81\xe0\x4a\xa0\x33\xbe\xca\xc5\x5d\x0a\x43\xa5\x39\x97\xdb\x04\x32\xbe\xe5\x2f\x62\x9e\x52\xc8\xa2\x19\xb5\xdd\xdd\xc1\x7e\x23\x08\x22\x3d\x8e\x7f\x69\x2d\x55\x41\x31\x52\x55\xd4\x1a\xcb\x04\x53\xea\xfa\x6b\x74\x2f\x2b\x91\x00\xd7\xb2\xa2\x85\xac\xb5\xda\x26\x8c\xd6\x89\x13\x6a\x26\xc1\xb9\x42\xdc\x59\x68\xd5\xf0\xe3\x22\xd8\x42\xf5\xae\x12\x5f\x84\x90\x09\x9e\x23\x17\x9e\xa7\xf8\x71\xbe\x25\xfb\x13\x00\x00\xff\xff\xad\xa3\x35\x56\x48\x04\x00\x00")

func templatesLicenseBytes() ([]byte, error) {
	return bindataRead(
		_templatesLicense,
		"templates/LICENSE",
	)
}

func templatesLicense() (*asset, error) {
	bytes, err := templatesLicenseBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/LICENSE", size: 1096, mode: os.FileMode(420), modTime: time.Unix(1451235108, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesMakefile = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x7c\x8f\xbd\x6e\xc4\x20\x10\x84\xeb\xf0\x14\xbc\x00\x90\x2a\x85\xa5\xf4\xa9\x92\xb4\x29\xd7\xf6\x18\x13\xf1\x63\x99\x5d\x25\x8f\x7f\x70\x67\xc9\x95\xaf\x9b\x81\x4f\xb3\xfa\xec\xf7\xc7\xd7\xe7\xcf\xa0\x2b\x58\x36\xcd\xa8\xac\xd4\x8c\x85\x24\xf2\x70\xd4\xfb\xd7\xa0\x5e\x7c\xd1\x1e\xac\x0d\x6b\xeb\xac\xb5\xe7\x83\x68\x1f\x78\x95\xd1\x4e\x25\xb9\x44\x21\x7a\xc9\xce\x97\x19\xa3\xf8\x0b\xea\x97\x01\xf9\x43\xc7\xcc\x18\xf2\x4c\x4c\x4f\x36\x27\xd4\x8d\x76\xb8\x1d\x4b\xc4\xff\x05\x44\x11\x13\xaf\x25\x51\x6d\xa3\x09\x4c\x31\x64\xc6\xde\xe9\xb3\x69\x63\x42\xae\xad\xc5\x96\x64\x6b\x77\xa1\x54\xd7\x7c\xf8\xf5\xd4\x04\x43\x42\x11\x7e\x7f\x7b\xad\x87\xea\x2d\x00\x00\xff\xff\x84\xd4\x68\xc2\x26\x01\x00\x00")

func templatesMakefileBytes() ([]byte, error) {
	return bindataRead(
		_templatesMakefile,
		"templates/Makefile",
	)
}

func templatesMakefile() (*asset, error) {
	bytes, err := templatesMakefileBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/Makefile", size: 294, mode: os.FileMode(420), modTime: time.Unix(1451235108, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesDevEnv = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xb4\x53\x5d\x6f\xd3\x40\x10\x7c\xce\xfd\x8a\xe9\x87\x14\xa9\xa2\x89\x02\xe2\xc5\x55\x40\x48\x44\x85\x07\xda\xa8\xb4\x08\xa9\xaa\x94\xcb\x79\x1d\x2f\x5c\xee\xcc\xdd\x39\xae\x45\xf9\xef\xec\xb9\x2d\xa0\x3e\x53\x3f\x9d\xbd\xb3\x73\x33\xbb\xe3\x83\xbd\xe9\x9a\xdd\x74\xad\x63\xad\xd4\x01\x16\x4e\xaf\x2d\x45\x44\xde\x36\x96\xd0\x04\xff\x8d\x4c\x82\x94\xa9\x44\xe7\xc3\xf7\xca\xfa\x4e\x70\x57\x51\x6f\xa8\x90\xc3\x6c\x22\x3d\xb1\x0d\x84\xde\xb7\xa8\xf5\xee\x6f\x53\xc9\x01\xec\x22\x97\x04\x8d\x71\x0c\x66\x9c\x3f\x49\xc5\x87\x1e\xc9\xc3\x78\xb9\xa3\x47\xc7\xa9\xc6\xe9\xf9\xf2\xdd\xe5\x07\xe1\x7b\x39\xc1\x2a\xfa\x36\x18\x42\x49\xbb\x09\xb9\xdd\x0a\x95\x0f\x70\xd4\x21\x51\xd8\xb2\xd3\x16\x91\x62\x64\xef\xa2\xe0\x5f\x4d\xf0\x99\x12\x04\x87\x9d\x0e\x7c\xaf\x5e\x27\x61\xb5\x56\x65\x47\xcb\x40\x81\x7e\x44\x1c\xa3\xd3\xc1\x81\x2b\xe1\x6d\xc8\x95\xe4\x0c\x0b\xd4\xf9\x94\x45\x26\x6d\xad\x38\x94\x8b\x1e\xd5\xc7\x14\x5a\x93\xb2\x31\x76\xc6\x87\xac\x5b\xd8\x8e\xff\xfb\xa3\xba\x9a\x4d\x8d\x8d\xc7\x1b\x4c\xc5\xf2\xd4\xb5\xd6\xe2\xee\x0e\x64\x6a\x8f\x31\x85\xe0\x43\x81\xd5\xc6\xaf\x06\xad\x95\x6f\x5d\xf9\x02\x1c\xc1\xff\x08\x7f\x3b\xce\x56\xaf\x12\x5b\x4e\x3d\xaa\xd6\x99\xf4\x30\x9f\x67\x10\xfc\x48\x8f\xa8\x2b\x92\xf1\x56\x7c\x9b\x97\x87\x9f\x6a\x74\x20\x4b\x75\x25\xe7\xaa\xe8\xea\xd1\x36\xa5\x4e\x84\x54\x13\x06\x88\xac\x89\x83\x77\x5b\x72\xe9\xcf\xba\x64\x33\xa5\x77\xe3\x94\xbb\x1f\xf0\x03\x56\x36\x25\x16\xb5\x0d\xa4\xcb\x3e\xf3\x26\x2d\x7e\x07\xae\x46\x4b\x64\xd6\xc4\x6e\x23\xc7\x98\xa3\xc9\x6e\xa2\x46\xd2\x71\x7d\x8d\x3d\xec\x17\x87\x99\xa1\xd8\xc7\x7c\x8e\x23\x79\x9b\x15\xfb\x47\xb8\xb9\x39\xc9\xcd\x4e\x8d\x46\x74\xdb\xf8\x90\x86\x6b\xe6\x52\x1c\xd0\x27\x6a\x54\xb1\xfa\xa5\xd4\x13\x57\x87\xf7\xd1\xcc\x7f\xc9\x90\xa7\x9c\x36\xd3\xc6\xe4\xb7\x4f\x42\x57\x4b\xce\x8a\xe7\x99\xb8\x3a\x3d\x9f\xbd\xfe\xb2\x38\x7b\x7f\x7e\xb1\xf8\xba\x5c\x5c\x7c\xfc\xb4\x38\xbb\x9c\xcf\xd4\xef\x00\x00\x00\xff\xff\xf0\x0d\x8e\xd0\xbd\x03\x00\x00")

func templatesDevEnvBytes() ([]byte, error) {
	return bindataRead(
		_templatesDevEnv,
		"templates/dev.env",
	)
}

func templatesDevEnv() (*asset, error) {
	bytes, err := templatesDevEnvBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/dev.env", size: 957, mode: os.FileMode(420), modTime: time.Unix(1455070176, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesPre_commit = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x9c\x90\xc1\x4e\xc3\x30\x10\x44\xef\xfe\x8a\xa1\x54\xe4\x42\x93\x96\x2b\x82\x9f\xe0\x88\x90\xea\xba\x6b\xc7\x52\x62\x57\xbb\x9b\x52\x24\x3e\x9e\x6d\x4b\x7b\x81\x0b\xe4\x10\xed\xda\xa3\x99\x79\xbe\xbd\xe9\x26\xe1\x6e\x93\x4b\x47\x65\x8f\x8d\x97\xde\xb9\x38\x6a\xa8\x53\xd1\xa7\x75\xca\x8a\x41\x16\x31\x0f\x24\xf8\x44\x62\xda\xa1\x69\x53\x9d\x37\xb6\x1d\x3c\x27\x41\xaa\x26\xc7\x62\xc0\xc3\xf3\xdd\xca\x4e\xdf\x83\x2d\x6b\x97\x23\x5e\x31\xbf\x38\x61\x91\x14\x4b\xbc\x3d\x42\x7b\x2a\x0e\xf6\x51\xe8\x2b\x66\x2f\x75\x24\x9c\xed\x3d\x53\x69\x14\xb1\xf2\xe8\x55\x69\x7b\x8f\xdd\x40\x5e\x08\x3c\x15\x34\xa9\xe2\x98\xd3\x76\x6d\xdb\x36\xd0\xfa\xad\xc3\x47\x9d\x18\x62\xbf\x40\x08\x75\x4b\xd8\x90\xdd\x1c\xe7\x71\xcc\xaa\xb9\xa4\xd9\x39\xee\x60\x28\x2b\x17\xb3\x73\x7b\xba\xe2\x55\xd8\x72\x36\xfd\xb5\xff\x45\xfa\x87\xfe\x3b\x2f\x62\xa9\x27\xe3\x9e\x26\xce\xa2\x39\xc8\x0f\x98\x6b\xee\x09\x46\x88\x8e\xce\x20\xe6\xca\x02\xab\x1a\x07\x6f\x8f\xeb\xcb\xd6\x48\x98\x29\xfc\x87\xf4\x34\x2d\xdd\x57\x00\x00\x00\xff\xff\x55\xc9\xf9\x14\xe4\x01\x00\x00")

func templatesPre_commitBytes() ([]byte, error) {
	return bindataRead(
		_templatesPre_commit,
		"templates/pre_commit",
	)
}

func templatesPre_commit() (*asset, error) {
	bytes, err := templatesPre_commitBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/pre_commit", size: 484, mode: os.FileMode(420), modTime: time.Unix(1451235108, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesTmux = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x6c\x90\xc1\x52\xc2\x30\x10\x86\xcf\xe6\x29\x96\xe0\x75\x29\xf4\xc4\xe0\x78\x70\xc4\x9b\xe3\x3b\x84\xb0\xd0\x8c\xed\x26\xb2\xa1\x05\x91\x77\xb7\x42\xda\x8a\xe3\xa9\x33\xbb\xdf\xff\xf5\xdf\x8c\x47\xd9\xca\x71\xb6\x32\x52\x28\xa1\x08\x48\xaa\xfd\x8a\x38\xcf\x8f\xa7\xd3\xe4\x29\x84\x37\x53\xd1\xf9\xac\x94\xdb\xc0\x08\x62\xb5\x3f\x40\x29\xf0\x05\xdb\x1d\x05\xc0\x0f\xd0\xf7\x09\xd7\x0f\x10\x0b\x62\x75\x77\x61\x98\x1a\x4c\x0b\xc0\x35\xa0\x40\xc7\xa9\x44\xec\x88\x5b\x33\x36\x8e\xd7\xbe\x81\xda\x55\x69\x2e\xa1\x74\xb1\x1b\x63\xdd\xe1\x42\xbc\xc6\x77\x3a\x0a\x60\xec\x5d\x8b\xd9\x64\x06\xba\xcd\x6a\x78\xc6\x6a\x30\x8b\xfb\x24\x0c\x86\xe9\x0f\x9c\x03\x2e\x21\x9f\xb6\xe0\x18\xfa\x9a\xdd\xaf\x18\xb4\xf5\x5c\xd3\x51\xff\xac\xc5\xef\x77\x96\x96\x54\xbf\x70\x3d\x28\xf2\x3e\xf9\x7f\x9f\x1c\xf4\xd6\x27\xcb\xa5\x52\x8b\xfb\x40\x0c\x45\x8c\x61\x91\x65\xa5\xb7\xa6\x2c\xbc\xc4\xc5\x7c\x3a\x9f\xaa\x8d\x53\x2a\xd9\x4a\xb2\xc3\xd5\xbf\x4b\xdf\x00\xd7\x9b\x5e\x15\x1d\xc8\x5e\x7b\x98\x18\x8d\x2d\x6e\xde\x7a\x48\xab\xef\x00\x00\x00\xff\xff\xa2\x02\x78\x17\xdf\x01\x00\x00")

func templatesTmuxBytes() ([]byte, error) {
	return bindataRead(
		_templatesTmux,
		"templates/tmux",
	)
}

func templatesTmux() (*asset, error) {
	bytes, err := templatesTmuxBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/tmux", size: 479, mode: os.FileMode(493), modTime: time.Unix(1455070133, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/.gitignore": templatesGitignore,
	"templates/LICENSE": templatesLicense,
	"templates/Makefile": templatesMakefile,
	"templates/dev.env": templatesDevEnv,
	"templates/pre_commit": templatesPre_commit,
	"templates/tmux": templatesTmux,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		".gitignore": &bintree{templatesGitignore, map[string]*bintree{}},
		"LICENSE": &bintree{templatesLicense, map[string]*bintree{}},
		"Makefile": &bintree{templatesMakefile, map[string]*bintree{}},
		"dev.env": &bintree{templatesDevEnv, map[string]*bintree{}},
		"pre_commit": &bintree{templatesPre_commit, map[string]*bintree{}},
		"tmux": &bintree{templatesTmux, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

