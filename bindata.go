// Code generated by go-bindata.
// sources:
// templates/.gitignore
// templates/LICENSE
// templates/Makefile
// templates/dev.env
// templates/pre_commit
// templates/tmux
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
	"os"
	"time"
	"io/ioutil"
	"path/filepath"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name string
	size int64
	mode os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesGitignore = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xd2\x73\x09\x8e\x0f\x2e\xc9\x2f\x4a\xe5\xd2\xd2\x2b\x2e\x8f\xce\xcb\x2f\x88\xe5\xca\xc9\x4f\xd7\xd7\xd2\x03\x92\x5c\x25\x89\xe9\xc5\x5c\x8a\x20\x52\x9f\xab\x24\xb7\x40\x5f\x4b\x4b\x5f\x0b\xc8\x07\xb2\x92\x13\x93\x33\x52\xf5\xf5\xb2\x53\x53\x0b\xb8\x00\x01\x00\x00\xff\xff\x74\xd8\x25\x55\x44\x00\x00\x00")

func templatesGitignoreBytes() ([]byte, error) {
	return bindataRead(
		_templatesGitignore,
		"templates/.gitignore",
	)
}

func templatesGitignore() (*asset, error) {
	bytes, err := templatesGitignoreBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/.gitignore", size: 68, mode: os.FileMode(420), modTime: time.Unix(1442159667, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _templatesLicense = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x5c\x52\xcd\x6e\xea\x3a\x10\xde\xfb\x29\x46\xac\x5a\x29\xe2\xee\xef\xce\x24\xa6\x58\x37\xc4\x91\x13\xca\x65\x19\x12\x43\x7c\x14\x62\x64\x3b\x07\x55\x55\xdf\xfd\xcc\x04\xda\xaa\x47\xaa\x54\xe6\xf3\xcc\xf7\x33\x93\xad\xac\x61\xb0\xad\x19\x83\x61\xac\xee\x0d\x10\x90\xdf\x01\x78\xc2\xe2\x99\xb1\xd4\x5d\xdf\xbc\x3d\xf7\x11\x9e\xda\x67\x78\x7f\x5f\x1e\x4c\xe3\x3f\x3e\xe8\x17\x9f\x62\xef\xf0\x37\x63\xa5\xf1\x17\x1b\x82\x75\x23\xd8\x00\xbd\xf1\xe6\xf8\x06\x67\xdf\x8c\xd1\x74\x09\x9c\xbc\x31\xe0\x4e\xd0\xf6\x8d\x3f\x9b\x04\xa2\x83\x66\x7c\x83\xab\xf1\x01\x07\xdc\x31\x36\x76\xb4\xe3\x19\x1a\x68\x51\x8c\x61\x67\xec\x91\x26\xb8\x53\xbc\x35\xde\x60\x73\x07\x4d\x08\xae\xb5\x0d\xf2\x41\xe7\xda\xe9\x62\xc6\xd8\x44\xd2\x3b\xd9\xc1\x04\x78\x8a\xe8\x7e\x51\x3d\x26\x16\xcf\xb3\x48\x67\x9a\x81\xd9\x11\xe8\xed\xf3\x09\x6e\x16\x4d\x4f\x11\xbc\x09\xd1\xdb\x96\x38\x12\xb0\x63\x3b\x4c\x1d\x79\xf8\x7c\x1e\xec\xc5\x3e\x14\x68\x7c\xde\x40\x60\x48\x3a\x05\x4c\x40\x3e\x13\xb8\xb8\xce\x9e\xe8\xbf\x99\x63\x5d\xa7\xe3\x60\x43\x9f\x40\x67\x89\xfa\x38\x45\x04\x03\x81\xf3\x42\x13\xca\xf1\x8f\xf3\x10\xcc\x30\x30\x64\xb0\xe8\x7b\xce\xfa\xed\x6e\xee\x21\xeb\x57\x5a\x68\x7c\xac\x28\x10\x72\xeb\xdd\xe5\x67\x12\x1b\xd8\x69\xf2\x23\x4a\x9a\x79\xa6\x73\xb8\xb2\x59\xf1\x97\x69\x23\x21\xd4\x7e\x72\xc3\xe0\x6e\x14\xad\x75\x63\x67\x29\x51\xf8\xf7\x7e\xed\xe6\xe8\x7e\x9b\x39\xcb\xfd\xc0\xa3\x8b\x68\xf5\x6e\x81\x0e\x70\xfd\xbe\xea\xe3\x29\xf4\xcd\x30\xc0\xd1\x3c\x16\x86\xba\x76\x64\x04\x7d\xc6\xf1\x24\x1f\x22\x1e\xde\x36\x03\x5c\x9d\x9f\xf5\xfe\x8e\xb9\x44\xfd\x8d\x80\x4a\xad\xeb\x3d\xd7\x02\x64\x05\xa5\x56\xaf\x32\x13\x19\x2c\x78\x85\xf5\x22\x81\xbd\xac\x37\x6a\x57\x03\x76\x68\x5e\xd4\x07\x50\x6b\xe0\xc5\x01\xfe\x93\x45\x96\x80\xf8\xbf\xd4\xa2\xaa\x40\x69\x26\xb7\x65\x2e\x05\x62\xb2\x48\xf3\x5d\x26\x8b\x17\x58\xe1\x5c\xa1\xf0\x5b\x96\xf8\x11\x23\x69\xad\x80\x04\x1f\x54\x52\x54\x44\xb6\x15\x3a\xdd\x60\xc9\x57\x32\x97\xf5\x21\x61\x6b\x59\x17\xc4\xb9\x56\x1a\x38\x94\x5c\xd7\x32\xdd\xe5\x5c\x43\xb9\xd3\xa5\xaa\x04\xca\x67\x48\x5b\xc8\x62\xad\x51\x45\x6c\x45\x51\x2f\x51\x15\x31\x10\xaf\x58\x40\xb5\xe1\x79\x4e\x52\x8c\xef\xd0\xbd\x26\x7f\x90\xaa\xf2\xa0\xe5\xcb\xa6\x86\x8d\xca\x33\x81\xe0\x4a\xa0\x33\xbe\xca\xc5\x5d\x0a\x43\xa5\x39\x97\xdb\x04\x32\xbe\xe5\x2f\x62\x9e\x52\xc8\xa2\x19\xb5\xdd\xdd\xc1\x7e\x23\x08\x22\x3d\x8e\x7f\x69\x2d\x55\x41\x31\x52\x55\xd4\x1a\xcb\x04\x53\xea\xfa\x6b\x74\x2f\x2b\x91\x00\xd7\xb2\xa2\x85\xac\xb5\xda\x26\x8c\xd6\x89\x13\x6a\x26\xc1\xb9\x42\xdc\x59\x68\xd5\xf0\xe3\x22\xd8\x42\xf5\xae\x12\x5f\x84\x90\x09\x9e\x23\x17\x9e\xa7\xf8\x71\xbe\x25\xfb\x13\x00\x00\xff\xff\xad\xa3\x35\x56\x48\x04\x00\x00")

func templatesLicenseBytes() ([]byte, error) {
	return bindataRead(
		_templatesLicense,
		"templates/LICENSE",
	)
}

func templatesLicense() (*asset, error) {
	bytes, err := templatesLicenseBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/LICENSE", size: 1096, mode: os.FileMode(420), modTime: time.Unix(1441715675, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _templatesMakefile = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x6c\xcd\xb1\x0e\xc2\x30\x0c\x04\xd0\x99\x7c\x45\x7e\x00\x87\x89\x21\x12\x3b\x13\xb0\x32\x86\xd4\x98\x48\x24\x46\xf5\x05\xa9\x7f\x0f\x85\x8a\x89\xcd\xbe\x3b\xe9\xd1\x69\x7f\x3c\x9c\xa3\x37\x46\x7f\x78\xb0\xc1\xb9\x81\xaf\xa9\xdf\x11\x97\xf7\x53\x45\xb7\x12\xf5\xc2\xf0\x6b\x78\x0a\x44\xf4\x0b\xa4\xe0\xd6\x2f\x94\xb5\x06\xab\x69\xc4\x64\x18\x99\x61\x41\x34\x6b\x7b\xf2\xf4\x6f\x99\x75\x60\x49\x4d\x0c\x29\x48\x69\xce\xcd\xd6\x17\x99\xaf\xb7\x52\x2a\x6b\xc7\x6e\xbb\xb1\xc5\x7b\x05\x00\x00\xff\xff\x82\x56\x71\xd2\xab\x00\x00\x00")

func templatesMakefileBytes() ([]byte, error) {
	return bindataRead(
		_templatesMakefile,
		"templates/Makefile",
	)
}

func templatesMakefile() (*asset, error) {
	bytes, err := templatesMakefileBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/Makefile", size: 171, mode: os.FileMode(420), modTime: time.Unix(1443887269, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _templatesDevEnv = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xb4\x53\x41\x6f\x13\x3d\x10\x3d\xc7\xbf\xe2\x35\xad\x94\xaf\xd5\xd7\x44\x85\x5b\xaa\x80\x90\x8a\xe0\x46\x25\xa8\x38\x54\x95\xe2\xec\xce\x66\x07\x9c\xf1\x62\x7b\x93\x46\x94\xff\xce\x78\x77\x23\xaa\x88\x23\xdd\x93\x13\x3f\xbf\x79\xf3\xde\xcc\xe9\xc9\x6c\xc5\x32\x5b\xd9\x58\x1b\x73\x8a\xf7\x62\x57\x8e\x22\x22\x6f\x1a\x47\x68\x82\xff\x46\x45\x82\x5e\x53\x89\x9d\x0f\xdf\x2b\xe7\x77\x8a\xbb\x8b\x76\x4d\x73\x3d\x5c\x4d\xf5\x4d\x6c\x03\x61\xef\x5b\xd4\x76\xfb\xe7\x51\xc9\x01\x2c\x91\x4b\x82\xc5\x24\x86\x62\x92\xff\xd2\x1b\x1f\xf6\x48\x1e\x85\xd7\x1a\x7b\xec\x38\xd5\xf8\xf0\xe9\xf6\xdd\x97\x8f\xca\xf7\x6a\x8a\x65\xf4\x6d\x28\x08\x25\x6d\xa7\x24\xdb\x25\x2a\x1f\x20\xb4\x43\xa2\xb0\x61\xb1\x0e\x91\x62\x64\x2f\x51\xf1\xaf\xa7\xf8\x4c\x09\x8a\xc3\xd6\x06\xee\xd5\xdb\xa4\xac\xce\x99\xdc\xd1\x6d\xa0\x40\x3f\x22\x2e\xb1\xb3\x41\xc0\x95\xf2\x36\x24\x25\x49\xc1\x0a\x15\x9f\xb2\xc8\x64\x9d\xd3\x0e\xb5\xd0\x41\x7d\x4c\xa1\x2d\x52\x6e\x8c\xa5\xf0\x21\xeb\x56\xb6\xcb\x7f\xfe\x99\x5d\xcd\x45\x8d\xb5\xc7\x1b\xcc\xb4\xe5\x99\xb4\xce\xe1\xe9\x09\x54\xd4\x1e\x13\x0a\xc1\x87\x39\x96\x6b\xbf\xec\xb4\x56\xbe\x95\xf2\x7f\x70\x04\x3f\x13\xfe\x76\x62\x8c\x76\x76\x8f\xb3\xff\x72\x54\x62\x37\xa4\x47\x75\xbb\x3f\xdd\x7e\xbd\x39\x3f\xc7\xc9\x62\x48\xe1\xe1\x1a\xa9\x26\x31\xd0\xaf\xab\x32\x1e\xaa\xfc\xad\xf7\xad\x75\x5c\x5e\xa3\xb1\x81\xa4\xcf\x74\xd3\x46\x9d\x08\xea\xc9\xc6\xa6\xe2\xce\xe7\x1b\xdf\xe9\x2b\x6a\x2b\x6b\x32\xf4\xd8\xf8\x90\x86\x58\x17\xcf\xa4\x1c\x89\xea\x9e\xde\x25\x76\x9c\xf6\xa8\x5a\x29\xd2\x90\xeb\x0b\x18\x7d\xa0\x47\xb4\x15\xe9\x58\x54\xfc\x98\xd5\xe1\xa7\x19\x9d\xea\x30\x4a\xc9\xf9\x56\xfd\xdc\xa3\x6d\x4a\x9b\x28\xbb\x84\x0e\xa2\xe3\xc5\xc1\xcb\x26\x5b\x70\x18\x33\x9d\xa8\xd2\xcb\x24\xe5\xd7\x03\xbe\xc3\x6a\x0e\x1a\x8d\x75\x81\x6c\xb9\xcf\xbc\xc9\x6a\x4e\x1d\x57\x63\x75\xd4\x57\xc4\xb2\xd6\x63\xcc\x2b\xc5\x32\x35\xa3\x9c\xdc\x3d\x4e\x30\x9e\x9f\x65\x86\xf9\x18\x8b\x05\x2e\xf4\xd7\xd5\x7c\x7c\x81\x87\x43\x5c\xa3\xd1\xe0\x6a\xef\xe9\x55\x8f\xbe\x36\x23\x4d\xe0\x97\x31\x47\x5d\x9d\xf5\xde\xe7\xed\xee\x4c\xce\x5b\x52\x68\x72\x7e\x73\xb4\x2c\xb5\xee\xc7\xfc\x65\x1c\x37\xbf\x03\x00\x00\xff\xff\x7a\x09\xe2\xc1\x5e\x04\x00\x00")

func templatesDevEnvBytes() ([]byte, error) {
	return bindataRead(
		_templatesDevEnv,
		"templates/dev.env",
	)
}

func templatesDevEnv() (*asset, error) {
	bytes, err := templatesDevEnvBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/dev.env", size: 1118, mode: os.FileMode(420), modTime: time.Unix(1441715621, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _templatesPre_commit = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x9c\x90\xc1\x4e\xc3\x30\x10\x44\xef\xfe\x8a\xa1\x54\xe4\x42\x93\x96\x2b\x82\x9f\xe0\x88\x90\xea\xba\x6b\xc7\x52\x62\x57\xbb\x9b\x52\x24\x3e\x9e\x6d\x4b\x7b\x81\x0b\xe4\x10\xed\xda\xa3\x99\x79\xbe\xbd\xe9\x26\xe1\x6e\x93\x4b\x47\x65\x8f\x8d\x97\xde\xb9\x38\x6a\xa8\x53\xd1\xa7\x75\xca\x8a\x41\x16\x31\x0f\x24\xf8\x44\x62\xda\xa1\x69\x53\x9d\x37\xb6\x1d\x3c\x27\x41\xaa\x26\xc7\x62\xc0\xc3\xf3\xdd\xca\x4e\xdf\x83\x2d\x6b\x97\x23\x5e\x31\xbf\x38\x61\x91\x14\x4b\xbc\x3d\x42\x7b\x2a\x0e\xf6\x51\xe8\x2b\x66\x2f\x75\x24\x9c\xed\x3d\x53\x69\x14\xb1\xf2\xe8\x55\x69\x7b\x8f\xdd\x40\x5e\x08\x3c\x15\x34\xa9\xe2\x98\xd3\x76\x6d\xdb\x36\xd0\xfa\xad\xc3\x47\x9d\x18\x62\xbf\x40\x08\x75\x4b\xd8\x90\xdd\x1c\xe7\x71\xcc\xaa\xb9\xa4\xd9\x39\xee\x60\x28\x2b\x17\xb3\x73\x7b\xba\xe2\x55\xd8\x72\x36\xfd\xb5\xff\x45\xfa\x87\xfe\x3b\x2f\x62\xa9\x27\xe3\x9e\x26\xce\xa2\x39\xc8\x0f\x98\x6b\xee\x09\x46\x88\x8e\xce\x20\xe6\xca\x02\xab\x1a\x07\x6f\x8f\xeb\xcb\xd6\x48\x98\x29\xfc\x87\xf4\x34\x2d\xdd\x57\x00\x00\x00\xff\xff\x55\xc9\xf9\x14\xe4\x01\x00\x00")

func templatesPre_commitBytes() ([]byte, error) {
	return bindataRead(
		_templatesPre_commit,
		"templates/pre_commit",
	)
}

func templatesPre_commit() (*asset, error) {
	bytes, err := templatesPre_commitBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/pre_commit", size: 484, mode: os.FileMode(420), modTime: time.Unix(1441715960, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _templatesTmux = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x7c\x91\xc1\x6e\xea\x30\x10\x45\xd7\xcc\x57\x5c\xfc\xd8\x9a\x40\x56\x88\xa7\x2e\xaa\xd2\x5d\xd5\x7f\x08\xc9\x40\xac\x26\x63\x17\x1b\x03\xa5\xfc\x7b\x23\x92\x14\xa8\x4a\x57\x91\xec\xeb\x33\xe7\x66\xfe\x0d\x93\xa5\x91\x64\x99\xf9\x92\x3c\x07\x68\xa6\xe6\xeb\xbd\xb1\xf2\x70\x3c\x8e\x1f\x9d\x7b\xcd\x6a\x3e\x9d\x88\x56\x5b\xc9\x43\x73\x0c\x6f\xb7\x9b\x9c\x17\x1c\x9f\x25\xe2\x48\x83\x50\x6f\xf7\xf0\x2c\x85\x7e\xe3\x83\x87\x0e\x18\x4d\xa1\xda\x14\x0a\x8e\x63\x96\xa8\xf0\xa4\x6b\x6a\x28\x66\x85\x21\xce\x2f\x2a\x8f\x4f\xac\x37\xec\xa0\xdf\xa1\x46\xdd\x50\xf5\x1f\xa1\x64\xe9\xa8\xc2\x3b\xdd\x5d\x40\x17\xd0\x1e\x7d\x8e\xba\xc4\x86\xa5\xf1\xd3\x3b\x23\x85\xdd\x21\x9a\xba\xf7\x71\x95\x09\xfd\xb1\x8e\x4d\xfc\x46\xbb\xc7\xcc\xa7\xe3\xe9\xaf\x0d\xae\xee\xa1\x1a\x6c\x5b\xe0\x3e\x25\xfd\xf6\xf1\xe6\x83\xb5\xcb\x84\x7f\x70\x52\xe8\x05\xd2\x09\x5d\x55\xeb\xf5\x04\x2a\xb7\x12\xf9\xa0\xee\x0d\x48\xff\x94\x4c\xa1\xd6\xb6\x23\x9c\x3d\x07\xd6\xb1\xa0\x0c\xc1\xcd\x93\xa4\xb2\x79\x56\x95\xd6\x87\xf9\x6c\x32\x9b\xd0\xca\x10\x75\xac\x8a\xf3\xcb\x3f\xba\x96\xbd\x09\xb4\x5d\x5e\x88\xf7\x9c\xb7\xab\xcb\x42\xc8\xf2\xf2\x66\x33\x97\xd7\xf4\x15\x00\x00\xff\xff\x4d\x0d\xf8\x27\x53\x02\x00\x00")

func templatesTmuxBytes() ([]byte, error) {
	return bindataRead(
		_templatesTmux,
		"templates/tmux",
	)
}

func templatesTmux() (*asset, error) {
	bytes, err := templatesTmuxBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/tmux", size: 595, mode: os.FileMode(493), modTime: time.Unix(1441801473, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if (err != nil) {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/.gitignore": templatesGitignore,
	"templates/LICENSE": templatesLicense,
	"templates/Makefile": templatesMakefile,
	"templates/dev.env": templatesDevEnv,
	"templates/pre_commit": templatesPre_commit,
	"templates/tmux": templatesTmux,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		".gitignore": &bintree{templatesGitignore, map[string]*bintree{
		}},
		"LICENSE": &bintree{templatesLicense, map[string]*bintree{
		}},
		"Makefile": &bintree{templatesMakefile, map[string]*bintree{
		}},
		"dev.env": &bintree{templatesDevEnv, map[string]*bintree{
		}},
		"pre_commit": &bintree{templatesPre_commit, map[string]*bintree{
		}},
		"tmux": &bintree{templatesTmux, map[string]*bintree{
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
        data, err := Asset(name)
        if err != nil {
                return err
        }
        info, err := AssetInfo(name)
        if err != nil {
                return err
        }
        err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
        if err != nil {
                return err
        }
        err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
        if err != nil {
                return err
        }
        err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
        if err != nil {
                return err
        }
        return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
        children, err := AssetDir(name)
        // File
        if err != nil {
                return RestoreAsset(dir, name)
        }
        // Dir
        for _, child := range children {
                err = RestoreAssets(dir, filepath.Join(name, child))
                if err != nil {
                        return err
                }
        }
        return nil
}

func _filePath(dir, name string) string {
        cannonicalName := strings.Replace(name, "\\", "/", -1)
        return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

